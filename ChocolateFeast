//Little Bobby loves chocolate. He frequently goes to his favorite  store, Penny Auntie, to buy them. They are having a promotion at Penny Auntie. 
//If Bobby saves enough wrappers, he can turn them in for a free chocolate.

//Example
//n = 15 changed to money
//c=3 changed to cost
//m=2 changed to wrappersToRedeem

//He has  to spend, bars cost , and he can turn in  wrappers to receive another bar. Initially, he buys  bars and has  wrappers after eating them. 
//He turns in  of them, leaving him with , for  more bars. After eating those two, he has  wrappers, turns in  leaving him with  wrapper and his new bar. 
//Once he eats that one, he has  wrappers and turns them in for another bar. After eating that one, he only has  wrapper, and his feast ends. 
//Overall, he has eaten 5 + 2 + 1 + 1 = 9 bars.

//Function Description

//Complete the chocolateFeast function in the editor below.

//chocolateFeast has the following parameter(s):

//int n: Bobby's initial amount of money
//int c: the cost of a chocolate bar
//int m: the number of wrappers he can turn in for a free bar
//Returns

int: the number of chocolates Bobby can eat after taking full advantage of the promotion
Note: Little Bobby will always turn in his wrappers if he has enough to get a free chocolate.

//Input Format

//The first line contains an integer, , the number of test cases to analyze.
//Each of the next  lines contains three space-separated integers: , , and . They represent money to spend, cost of a chocolate, and the number of wrappers 
//he can turn in for a free chocolate.

function chocolateFeast(money, cost, wrappersToRedeem) {
    // Write your code here
    var bars = 0;
    var newBars = 0;
    var wrappers = 0;
    var extraWrappers = 0;
    var count = 0
    bars = Math.floor(money/cost);
    wrappers = bars;
    while ( wrappers >= wrappersToRedeem){
        count ++;
        newBars = Math.floor(wrappers/wrappersToRedeem);
        extraWrappers = wrappers%wrappersToRedeem;
        bars = bars + Math.floor(wrappers/wrappersToRedeem);
        wrappers = newBars + extraWrappers;
    }
    return Math.floor(bars);
}
