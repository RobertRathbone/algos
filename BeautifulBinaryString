//Alice has a binary string. She thinks a binary string is beautiful if and only if it doesn't contain the substring .

//In one step, Alice can change a  to a  or vice versa. Count and print the minimum number of steps needed to make Alice see the string as beautiful.

//Example
//b = 010

//She can change any one element and have a beautiful string.

//Function Description

//Complete the beautifulBinaryString function in the editor below.

//beautifulBinaryString has the following parameter(s):

//string b: a string of binary digits
//Returns

//int: the minimum moves required
//Input Format

//The first line contains an integer n, the length of binary string.
//The second line contains a single binary string a.

//Constraints
//1 <+n <= 100
// a[i] {0,1}

//Output Format

//Print the minimum number of steps needed to make the string beautiful.

function beautifulBinaryString(a) {
    var count = 0;
    for (let i = 0; i < a.length; i++){
        if (a[i] == "0" && a[i+1] == 1 && a[i+2] == 0 
        && a[i+3] == 1){
            count++;
            i = i+3;
        }
        if (a[i] == "0" && a[i+1] == 1 && a[i+2] == 0){
            count++;
            i = i+2;
        }
    }
    return count
}
